{% set fname = "verification_ip/environment_packages/{{name}}_env_pkg/src/{{name}}_environment.svh" %}
{% extends "base_template.TMPL" %}

{% block description %}
//
//----------------------------------------------------------------------
// Project         : {{name}} Environment 
// Unit            : {{name}} Environment
// File            : {{name}}_environment.svh
//----------------------------------------------------------------------
//                                          
// DESCRIPTION: This environment contains all agents, predictors and
// scoreboards required for the block level design.
{% endblock %}

{% block contents %}



class {{name}}_environment 
{%if paramDefs|length > 0%}      #(
{% for param in paramDefs %}      {{param.type}} {{param.name}} = {{param.value}}{% if not loop.last %},{% endif %}                                
{% endfor %}      )
{% endif %}
extends uvmf_environment_base #(.CONFIG_T( {{name}}_env_configuration
{%if paramDefs|length > 0%}                              #(
{% for param in paramDefs %}                             .{{param.name}}({{param.name}}){% if not loop.last %},{% endif %}                                
{% endfor %}                             )
{% endif %}                             ));

{%if paramDefs|length > 0%}
  `uvm_component_param_utils( {{name}}_environment #(
  {% for param in paramDefs %}                            {{param.name}}{% if not loop.last %},{% endif %}

  {% endfor %}                          ))
{% else %}
  `uvm_component_utils( {{name}}_environment );
{% endif %}

{% for sub_env in subEnvironments %}
  typedef {{sub_env.envPkg}}_environment {% if sub_env.parameters|length > 0 %}#({% endif %}{% for param in sub_env.parameters %}.{{param.name}}({{param.value}}){% if not loop.last %},{% endif %}{% endfor %}{% if sub_env.parameters|length > 0 %}) {% endif %}{{sub_env.name}}_t;
  {{sub_env.name}}_t {{sub_env.name}};
   
{% endfor %}

{% for sub_env in qvipSubEnvironments %}
  typedef {{sub_env.envPkg}}_environment /* #() */ {{sub_env.envPkg}}_{{sub_env.name}}_environment_t;
  {{sub_env.envPkg}}_{{sub_env.name}}_environment_t  {{sub_env.name}};

{% endfor %}

{% for ap in analysis_ports %}
  uvm_analysis_port #({{ap.tType}}) {{ap.name}};
{% endfor %}
{% for ep in analysis_exports %}
  uvm_analysis_export #({{ep.tType}}) {{ep.name}};
{% endfor %}

{% for agent in qvip_ap_names %}
  uvm_analysis_port #( mvc_sequence_item_base ) {{agent.name}}_{{agent.agent}}_ap [string];
{% endfor %}

{% for agent in agents %}
  typedef {{agent.ifPkg}}_agent {% if agent.parameters|length > 0 %}#({% endif %}{% for param in agent.parameters %}.{{param.name}}({{param.value}}){% if not loop.last %},{% endif %}{% endfor %}{% if agent.parameters|length > 0 %}) {% endif %}{{agent.name}}_agent_t;
  {{agent.name}}_agent_t {{agent.name}};

{% endfor %}

{% for analysisComp in analysisComponents %}
  typedef {{analysisComp.type}} {%if paramDefs|length > 0%} #(
{% for param in paramDefs %}                             .{{param.name}}({{param.name}}){% if not loop.last %},{% endif %}                                
{% endfor %}                             ) {% endif %} {{analysisComp.name}}_t;
  {{analysisComp.name}}_t {{analysisComp.name}};
{% endfor %}

{% for scoreboard in scoreboards %}
  typedef {{scoreboard.sType}} #({{scoreboard.tType}})  {{scoreboard.name}}_t;
  {{scoreboard.name}}_t {{scoreboard.name}};
{% endfor %}

{% for c2eConn in c2eConnections %}
  uvm_analysis_port #({{c2eConn.tType}}) {{c2eConn.name}};
{% endfor %}

{% for regModel in regModels %}
{% if regModel.adapterType != None %}
   // Instantiate register model adapter and predictor
   typedef {{regModel.adapterType}}    reg_adapter_t;
   reg_adapter_t    reg_adapter;
{% endif %}
{% if regModel.transactionType != None %}
   typedef uvm_reg_predictor #({{regModel.transactionType}}) reg_predictor_t;
   reg_predictor_t    reg_predictor;
{% endif %}
{% endfor %}

// ****************************************************************************
// FUNCTION : new()
// This function is the standard SystemVerilog constructor.
//
  function new( string name = "", uvm_component parent = null );
    super.new( name, parent );
  endfunction

// ****************************************************************************
// FUNCTION: build_phase()
// This function builds all components within this environment.
//
  virtual function void build_phase(uvm_phase phase);
    super.build_phase(phase);
{% for sub_env in subEnvironments %}
    {{sub_env.name}} = {{sub_env.name}}_t::type_id::create("{{sub_env.name}}",this);
    {{sub_env.name}}.set_config(configuration.{{sub_env.name}}_config);
{% endfor %}
{% for sub_env in qvipSubEnvironments %}
    {{sub_env.name}} = {{sub_env.envPkg}}_{{sub_env.name}}_environment_t::type_id::create("{{sub_env.name}}",this);
    {{sub_env.name}}.set_config(configuration.{{sub_env.name}}_config);
{% endfor %}
{% for ap in analysis_ports %}
    {{ap.name}} = new("{{ap.name}}",this);
{% endfor %}
{% for ep in analysis_exports %}
    {{ep.name}} = new("{{ep.name}}",this);
{% endfor %}
{% for agent in agents %}
    {{agent.name}} = {{agent.name}}_agent_t::type_id::create("{{agent.name}}",this);
{% endfor %}
{% for analysisComp in analysisComponents %}
    {{analysisComp.name}} = {{analysisComp.name}}_t::type_id::create("{{analysisComp.name}}",this);
    {{analysisComp.name}}.configuration = configuration;
{% endfor %}
{% for scoreboard in scoreboards %}
    {{scoreboard.name}} = {{scoreboard.name}}_t::type_id::create("{{scoreboard.name}}",this);
{% endfor %}
{% for c2eConn in c2eConnections %}
   {{c2eConn.name}} = new("{{c2eConn.name}}",this);
{% endfor %}

{% for regModel in regModels %}
{% if regModel.transactionType != None %}
  // Build register model predictor if prediction is enabled
  if (configuration.enable_reg_prediction) begin
    reg_predictor = reg_predictor_t::type_id::create("reg_predictor", this);
  end
{% endif %}
{% endfor %}

  endfunction

// ****************************************************************************
// FUNCTION: connect_phase()
// This function makes all connections within this environment.  Connections
// typically inclue agent to predictor, predictor to scoreboard and scoreboard
// to agent.
//
  virtual function void connect_phase(uvm_phase phase);
    super.connect_phase(phase);
{% for conn in connections %}
    {{conn.name}}.{{conn.pName}}.connect({{conn.subscriberName}}.{{conn.aeName}});
{% endfor %}
{% for agent in qvip_ap_names %}
    {{agent.name}}_{{agent.agent}}_ap = {{agent.name}}.{{agent.agent}}.ap; 
{% endfor %}
{% for connection in qvipConnections %}
    {{connection.output_component}}_ap["{{connection.output_port_name}}"].connect({{connection.input_component}}.{{connection.input_component_export_name}});
{% endfor %}

{% for sub_env in qvipSubEnvironments %}
{% for agent in sub_env.qvip_if_name %}
    if ( configuration.{{sub_env.name}}_interface_activity[{{loop.index0}}] == ACTIVE )
       uvm_config_db #(mvc_sequencer)::set(null,UVMF_SEQUENCERS,configuration.{{sub_env.name}}_interface_names[{{loop.index0}}],{{sub_env.name}}.{{agent}}.m_sequencer  );
{% endfor %}
{% endfor %}


{% for ap in analysis_ports %}
    {{ap.connection}}.connect({{ap.name}});
{% endfor %}
{% for ep in analysis_exports %}
    {{ep.name}}.connect({{ep.connection}});
{% endfor %}

{% for regModel in regModels %}
{% if regModel.adapterType != None %}
    // Create register model adapter if required
    if (configuration.enable_reg_prediction ||
        configuration.enable_reg_adaptation)
      reg_adapter = reg_adapter_t::type_id::create("reg_adapter");
    // Set sequencer and adapter in register model map
    if (configuration.enable_reg_adaptation)
      configuration.reg_model.{{regModel.busMap}}.set_sequencer({{regModel.sequencer}}.sequencer, reg_adapter);
    // Set map and adapter handles within uvm predictor
    if (configuration.enable_reg_prediction) begin
      reg_predictor.map     = configuration.reg_model.{{regModel.busMap}};
      reg_predictor.adapter = reg_adapter;
      // temp {{regModel.sequencer}}.monitored_ap.connect(reg_predictor.bus_in);
    end
{% endif %}
{% endfor %}

  endfunction

endclass

{% endblock %}
