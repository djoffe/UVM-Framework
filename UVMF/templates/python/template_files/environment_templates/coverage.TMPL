{% set fname = "verification_ip/environment_packages/{{env_name}}_env_pkg/src/{{name}}.svh" %}
{% set conditional = "coverage" %}
{% extends "base_template.TMPL" %}

{% block description %}
//
//----------------------------------------------------------------------
// Project         : {{name}} 
// Unit            : {{name}} 
// File            : {{name}}.svh
//----------------------------------------------------------------------
{% endblock %}
{% block contents %}
//
// DESCRIPTION: 
//         This component is used to collect functional coverage at the environment level.
//   Coverage collection components typically do not have analysis ports for broadcasting
//   transactions.  They typically only receive transactions and sample functional coverage
//   on the transaction variables.
// 
//   This analysis component has the following analysis_exports that receive the 
//   listed transaction type.
//   
{% for export in exports %}
//   {{export.name}} receives transactions of type  {{export.tType}}  
{% endfor %}
//
//   This analysis component has the following analysis_ports that can broadcast 
//   the listed transaction type.
//
{% for port in ports %}
//  {{port.name}} broadcasts transactions of type {{port.tType}} 
{% endfor %}
//

class {{name}} 
{%if paramDefs|length > 0%}      #(
{% for param in paramDefs %}      {{param.type}} {{param.name}} = {{param.value}}{% if not loop.last %},
{% endif %}
{% endfor %}      )
{% endif %}
extends uvm_component;

  // Factory registration of this class
{%if paramDefs|length > 0%}
  `uvm_component_param_utils( {{name}} #(
  {% for param in paramDefs %}                            {{param.name}}{% if not loop.last %},{% endif %}

  {% endfor %}                          ))
{% else %}
  `uvm_component_utils( {{name}} );
{% endif %}

  // Instantiate a handle to the configuration of the environment in which this component resides
  {{env_name}}_env_configuration {%if paramDefs|length > 0%}  #(
{% for param in paramDefs %}             .{{param.name}}({{param.name}}){% if not loop.last %},{% endif %}                                
{% endfor %}             ) {% endif %} configuration;

  // Instantiate the analysis exports
{% for export in exports %}
  uvm_analysis_imp_{{export.name}} #({{export.tType}}, {{name}} {%if paramDefs|length > 0%} #(
  {% for param in paramDefs %}                            .{{param.name}}({{param.name}}){% if not loop.last %},{% endif %}

  {% endfor %}                          ) {% endif %}) {{export.name}};
{% endfor %}

{% if ports|length > 0 %}  // Instantiate the analysis ports {% endif %}
{% for port in ports %}
  uvm_analysis_port #({{port.tType}}) {{port.name}};
{% endfor %}

{% for port in ports %}
  // Transaction variable for transactions to be sent out {{port.name}}
  typedef {{port.tType}} {{port.name}}_output_transaction_t;
  {{port.name}}_output_transaction_t {{port.name}}_output_transaction;
  // Code for sending output transaction out through {{port.name}}
  // {{port.name}}.write({{port.name}}_output_transaction);

{% endfor %}

// ****************************************************************************
  // UVMF_CHANGE_ME : Add coverage bins, crosses, exclusions, etc. according to coverage needs.
  covergroup {{name}}_cg;
    option.auto_bin_max=1024;
    option.per_instance=1;
  endgroup



// ****************************************************************************
  // FUNCTION: new
  function new(string name, uvm_component parent);
     super.new(name,parent);
    {{name}}_cg=new;
  endfunction

// ****************************************************************************
  // FUNCTION: build_phase
  virtual function void build_phase (uvm_phase phase);
    super.build_phase(phase);

    {{name}}_cg.set_inst_name($sformatf("{{name}}_cg_%s",get_full_name()));

{% for export in exports %}
    {{export.name}} = new("{{export.name}}", this);
{% endfor %}

{% for port in ports %}
    {{port.name}} =new("{{port.name}}", this );
{% endfor %}

  endfunction

{% for export in exports %}
// ****************************************************************************
  // FUNCTION: write_{{export.name}}
  // Transactions received through {{export.name}} initiate the execution of this function.
  // This function collects functional coverage on variables within the received transaction
  virtual function void write_{{export.name}}({{export.tType}} t);
    `uvm_info("COV", "Transaction Received through {{export.name}}", UVM_MEDIUM)
    `uvm_info("COV", {"            Data: ",t.convert2string()}, UVM_FULL)

{% for port in ports %}
  // Code to construct output transaction of type {{port.name}}_output_transaction_t
  {{port.name}}_output_transaction = {{port.name}}_output_transaction_t::type_id::create("{{port.name}}_output_transaction");
{% endfor %}

{% for port in ports %}
    // Code for sending output transaction out through {{port.name}}
    {{port.name}}.write({{port.name}}_output_transaction);
{% endfor %}
  endfunction

{% endfor %}
endclass 

{% endblock %}
