{% set fname = "project_benches/{{name}}/sim/Makefile" %}

{% block description %}
#
#----------------------------------------------------------------------
#                                          
# DESCRIPTION: This makefile includes the shared makefile and contains
#   bench level make targets.
#
#----------------------------------------------------------------------
{% endblock %}

{% block contents %}

# pragma uvmf custom additional begin
# pragma uvmf custom additional end

# *********************************************************************************************
# UVMF library directory:
# This variable points to the UVMF release where uvmf_base_pkg directory resides.
# This variable points to release code that is not user modified.
# This variable allows for UVMF release directories to reside independent of project related verification_ip and project_benches directories.
# This code below looks "upward" for directory starting with UVMF_* and returns first match for use with the release examples.
UVMF_HOME ?= ___PLEASE_SET_AN_ENVIRONMENT_VARIABLE_NAMED_UVMF_HOME_TO_POINT_TO_THE_UVMF_INSTALLATION___

# pragma uvmf custom exports begin
#
# Project(s) specific verification_ip library:
# Directory where reusable verification packages for interfaces, environments, utilities, etc. reside.
# This variable allows for verification_ip to reside independent of project bench and UVMF release directories.
# For examples deployed with UVMF this will be $(UVMF_HOME)/<example_group>/verification_ip
# export UVMF_VIP_LIBRARY_HOME ?= ../../../verification_ip
export UVMF_VIP_LIBRARY_HOME ?= $(PWD)/../../../verification_ip
{% if vipLibEnvVariableNames|length > 0 %}
# Include environment variables for all listed vip libraries
{% for bfm in vipLibEnvVariableNames %}export {{bfm}} ?= $(UVMF_VIP_LIBRARY_HOME)
{% endfor %}
{% endif %}
#
# Project specific bench:
# Directory where bench specific code is located.
# This variable allows for project_benches to reside independent of verification_ip and UVMF release directories.
# For examples deployed with UVMF this will be $(UVMF_HOME)/<example_group>/project_benches/<example_bench>
# export UVMF_PROJECT_DIR ?= ../../../project_benches/{{name}}
export UVMF_PROJECT_DIR ?= $(PWD)/..
#
{% if qvip_pkg_env_variables|length > 0 %}
# *********************************************************************************************
# QVIP specific code generated by QVIP Configurator:
# These variables identify where code generated by the QVIP configurator is located.
# The default values for these variables are to indicate to the user that the value needs to be set.
# This variable should point down to and including the uvmf directory in the QVIP confiurator generated code.
{% endif %}
{% for qvip_env_vars in qvip_pkg_env_variables %}
export {{qvip_env_vars}}_DIR_NAME ?= the_environment_variable_named_{{qvip_env_vars}}_DIR_NAME_needs_to_point_to_the_QVIP_configurator_generated_code_for_this_sub_environment
{% endfor %}
#
# pragma uvmf custom exports end
# *********************************************************************************************

## Check PATH for required vinfo scripts
PVAL := $(shell command -v make_filelist.py 2> /dev/null)
ifndef PVAL
  MFLIST = $(UVMF_HOME)/scripts/make_filelist.py
else
  MFLIST = make_filelist.py
endif

# Set test case specific Variables
{% if inFactReady %}
TEST_NAME_DEFAULT_0 = test_top
TEST_NAME_DEFAULT_1 = infact_test_base
TEST_NAME_DEFAULT   = $(TEST_NAME_DEFAULT_$(USE_INFACT))
TEST_NAME            ?= $(TEST_NAME_DEFAULT)
{% else %}
TEST_NAME            ?= test_top
{% endif %}

TEST_SEED            ?= random
UVM_CLI_ARGS         = 

# Usage of Veloce, etc. to be input by the user (subject to defaults)
USE_VELOCE          ?= 0

# Usage of vinfo flow for generating file list
USE_VINFO           ?= 0

# Usage of Veloce and Questa profilers
USE_VELOCE_PROFILER ?= 0
USE_QUESTA_PROFILER ?= 0

{% if inFactReady %}
# Usage of inFact
USE_INFACT ?= 0
{% endif %}

# Set project Variables
TEST_PLAN_NAME       = {{name}}_TestPlan
REPORTING_DO_FILE    = {{name}}_reports_script

{% if inFactReady %}
# We must always pass this inFact .ini file to VRM
# This must be set before the common makefile is included
VRUN_ARGS += -GINFACT_INI="+infact=(%TASKDIR%)/../../build_task/infact_proj_dir/infact_proj_dir.ini"
{% endif %}

# Include makefile that includes targets for UVM_VIP_Library packages
include $(UVMF_HOME)/scripts/Makefile

{% if qvip_pkg_env_variables|length > 0 %}
include $(UVMF_HOME)/common/utility_packages/qvip_utils_pkg/Makefile
{% endif %}


{% if useCoEmuClkRstGen %}
include $(UVMF_HOME)/common/uvm_co_emulation_utilities/Makefile
{% endif %}

# Include all requisite interface package targets for this bench
{% for bfm in bfm_pkg_env_variables %}include $({{bfm.vipLibEnvVariable}})/interface_packages/{{bfm.ifPkg}}_pkg/Makefile
{% endfor %}

# Include all requisite environment package targets for this bench
include $(UVMF_VIP_LIBRARY_HOME)/environment_packages/{{env_name}}_env_pkg/Makefile

{% if inFactReady %}
INFACT_VSIM_ARGS_0 =
INFACT_VSIM_ARGS_1 += +infact=infact_proj_dir/infact_proj_dir.ini
INFACT_VSIM_ARGS = $(INFACT_VSIM_ARGS_$(USE_INFACT))


INFACT_VLOG_ARGS_0 =
INFACT_VLOG_ARGS_1 += +incdir+./infact_proj_dir +define+INFACT_ENABLE_COMPILE
INFACT_VLOG_ARGS = $(INFACT_VLOG_ARGS_$(USE_INFACT))

# When running inFact, bring in the inFact sequences package
INFACT_VOPT_ARGS_0 = 
INFACT_VOPT_ARGS_1 += {{name}}_infact_sequences_pkg
INFACT_VOPT_ARGS = $(INFACT_VOPT_ARGS_$(USE_INFACT))

VLOG_ARGS += $(INFACT_VLOG_ARGS)
{% endif %}

{% if useDpiLink %}
GPP                  = $(QUESTA_HOME)/gcc-4.5.0-linux_x86_64/bin/g++
export MTI_VCO_MODE = 64

# Include dpi link Makefile
include $(UVMF_HOME)/common/dpi_link_pkg/Makefile

COMMON_VSIM_ARGS      +=   -sv_lib sv_lib
{% endif %}

# Add to default compile/load/run arguments
VCOM_ARGS             += 

# Note: vsim-3009 error can be eliminated by adding -timescale 1ps/1ps to VLOG_ARGS
{% if useCoEmuClkRstGen or qvip_bfm_pkgs|length > 0 %}
VLOG_ARGS             +=  -timescale 1ps/1ps +define+UVM_REPORT_DISABLE_FILE_LINE
{% else %}
VLOG_ARGS             += +define+UVM_REPORT_DISABLE_FILE_LINE
{% endif %}
VELANALYZE_ARGS       +=
VELANALYZE_HVL_ARGS   +=

BATCH_VOPT_ARGS       +=
DEBUG_VOPT_ARGS       +=
EXTRA_VOPT_TOPS       += {% if additionalTops|length > 0 %} {% for top in additionalTops %}{{top}} {% endfor %}{% endif %}

COMMON_VSIM_ARGS      += {% if qvip_bfm_pkgs|length > 0 %} -mvchome $(QUESTA_MVC_HOME) {% endif %} 
COMMON_VSIM_ARGS      += {% if svLibNames|length > 0 %} {% for svLibName in svLibNames %} -sv_lib {{svLibName}} {% endfor %} {% endif %} 

{% if inFactReady %}
COMMON_VSIM_ARGS      += $(INFACT_VSIM_ARGS)
BATCH_VOPT_ARGS       += $(INFACT_VOPT_ARGS)
DEBUG_VOPT_ARGS       += $(INFACT_VOPT_ARGS)
{% endif %}

BATCH_VSIM_ARGS       += #-uvmcontrol=none
DEBUG_VSIM_ARGS       += 
EXTRA_VSIM_TOPS       += 

{% if vmaps|length > 0 %}
create_{{name}}_vmaps: 
{% for vmap in vmaps %}
	vmap {{vmap.name}} {{vmap.dirName}}
{% endfor %}
{% endif %}

# Project bench package source
{{name}}_PARAMETERS_PKG =\
$(UVMF_PROJECT_DIR)/tb/parameters/{{name}}_parameters_pkg.sv


{{name}}_SEQUENCES_PKG =\
$(UVMF_PROJECT_DIR)/tb/sequences/{{name}}_sequences_pkg.sv

{% if inFactReady %}
{{name}}_INFACT_SEQUENCES_PKG =\
$(UVMF_PROJECT_DIR)/tb/sequences/{{name}}_infact_sequences_pkg.sv
{% endif %}

{{name}}_TEST_PKG =\
$(UVMF_PROJECT_DIR)/tb/tests/{{name}}_tests_pkg.sv

# pragma uvmf custom dut_files begin
# UVMF_CHANGE_ME : Reference Verilog DUT source.
{{name}}_VERILOG_DUT =\
$(UVMF_PROJECT_DIR)/rtl/verilog/verilog_dut.v

# UVMF_CHANGE_ME : Reference VHDL DUT source.
{{name}}_VHDL_DUT =\
$(UVMF_PROJECT_DIR)/rtl/vhdl/vhdl_dut.vhd
# pragma uvmf custom dut_files end


# Project bench package targets
COMP_{{name}}_PARAMETERS_PKG_TGT_0 = q_comp_{{name}}_parameters_pkg
COMP_{{name}}_PARAMETERS_PKG_TGT_1 = v_comp_{{name}}_parameters_pkg
COMP_{{name}}_PARAMETERS_PKG_TGT = $(COMP_{{name}}_PARAMETERS_PKG_TGT_$(USE_VELOCE))

comp_{{name}}_parameters_pkg: $(COMP_{{name}}_PARAMETERS_PKG_TGT)

q_comp_{{name}}_parameters_pkg:
	        $(HVL_COMP_CMD) +incdir+$(UVMF_PROJECT_DIR)/tb/parameters $({{name}}_PARAMETERS_PKG)

v_comp_{{name}}_parameters_pkg: q_comp_{{name}}_parameters_pkg
	$(HDL_COMP_CMD) +incdir+$(UVMF_PROJECT_DIR)/tb/parameters $({{name}}_PARAMETERS_PKG)
 

comp_{{name}}_sequence_pkg:
	$(HVL_COMP_CMD) +incdir+$(UVMF_PROJECT_DIR)/tb/sequences $({{name}}_SEQUENCES_PKG)

comp_{{name}}_tests_pkg:
	$(HVL_COMP_CMD) +incdir+$(UVMF_PROJECT_DIR)/tb/tests $({{name}}_TEST_PKG)

# pragma uvmf custom dut_compile_make_target begin
# UVMF_CHANGE_ME : Add make target to compile your verilog dut here
comp_{{name}}_verilog_dut: 
	echo "Compile your verilog DUT here"
	$(HDL_COMP_CMD) $({{name}}_VERILOG_DUT)

# UVMF_CHANGE_ME : Add make target to compile your vhdl dut here
comp_{{name}}_vhdl_dut: 
	echo "Compile your vhdl DUT here"
	$(HDL_COMP_CMD_VHDL) $({{name}}_VHDL_DUT)

# UVMF_CHANGE_ME : Add make target to compile your dut here
comp_{{name}}_dut: comp_{{name}}_verilog_dut comp_{{name}}_vhdl_dut
# pragma uvmf custom dut_compile_make_target end

{% if qvip_bfm_pkgs|length > 0 %}
comp_qvip: 
{% endif %}
{% for qvip_env_vars in qvip_pkg_env_variables %}
	$(HVL_COMP_CMD) +incdir+$(QUESTA_MVC_HOME)/questa_mvc_src/sv/ -f $({{qvip_env_vars}}_DIR_NAME)/{{qvip_bfm_pkgs[loop.index-1]}}_filelist.f
	$(HVL_COMP_CMD) +incdir+$({{qvip_env_vars}}_DIR_NAME) $({{qvip_env_vars}}_DIR_NAME)/hdl_{{qvip_bfm_pkgs[loop.index-1]}}.sv
{% endfor %}

BUILD_TGT_0 = make_build
BUILD_TGT_1 = vinfo_build
BUILD_TGT = $(BUILD_TGT_$(USE_VINFO))


{% if inFactReady %}
ifeq (1,$(USE_INFACT))
comp_hvl : comp_hvl_core import_infact comp_{{name}}_infact_sequences_pkg

# infact_{{name}}.d - used to check whether interface-package sources
#                     have changed since the last time we imported

COMP_DEPS = \
{% for bfm in bfm_pkgs %}
{% if bfm.activity == 'ACTIVE' %}
  $(COMP_{{bfm}}_PKG_DEPS) \
{% endif %}
{% endfor %} 

import_infact : infact_{{name}}.d

# inFact import depends on having the core HVL compiled
infact_{{name}}.d : $(COMP_DEPS)
{% for bfm in bfms %}
{% if bfm.activity == 'ACTIVE' %}
	$(INFACT_HOME)/bin/infact cmd import_testbench -project infact_proj_dir \
		-sv_lib work -unit {{name}}_sequences_pkg \
		{{name}}_sequences_pkg::{{bfm.name}}_{{bfm.ifPkg}}_transaction
	$(INFACT_HOME)/bin/infact cmd create_stimulus_strategy \
		-name {{bfm.name}}_fields -auto-bin-max 64 fields \
		infact_proj_dir/infact_{{bfm.name}}_{{bfm.ifPkg}}_transaction_gen/infact_{{bfm.name}}_{{bfm.ifPkg}}_transaction_gen.tmd
{% endif %}
{% endfor %}
	$(INFACT_HOME)/bin/infact cmd genproject -rebuild infact_proj_dir
	@touch $@

# Compile the inFact sequences package
comp_{{name}}_infact_sequences_pkg :
	$(HVL_COMP_CMD) +incdir+$(UVMF_PROJECT_DIR)/tb/sequences $({{name}}_INFACT_SEQUENCES_PKG)

else # USE_INFACT=0

comp_hvl : comp_hvl_core

endif

{% else %}
comp_hvl : comp_hvl_core
{% endif %}

{% if useDpiLink %}
dpiheader.h:
	$(HDL_COMP_CMD) {% for bfm in bfm_pkgs %}$({{bfm}}_PKG_HDL) $({{bfm}}_PKG) {% endfor %} -dpiheader dpiheader.h -suppress 2275

sv_lib.so:	{% for bfm in bfm_pkgs %}{{bfm}}_tc.o {% endfor %} uvmf_tc.o dpi_link.o dpiheader.h
	${GPP}  uvmf_tc.o {% for bfm in bfm_pkgs %}{{bfm}}_tc.o {% endfor %} dpi_link.o -shared -o sv_lib.so 
{% endif %}

comp_hvl_core : {% if qvip_bfm_pkgs|length > 0 %} comp_qvip comp_qvip_utils_pkg {% endif %} {% if useCoEmuClkRstGen %} comp_co_emulation_clock_pkg comp_co_emulation_reset_pkg comp_co_emulation_memload_pkg {% endif %} \
	{% for bfm in bfm_pkgs %} comp_{{bfm}}_pkg {% endfor %} \
	comp_{{env_name}}_env_pkg \
	comp_{{name}}_parameters_pkg comp_{{name}}_sequence_pkg comp_{{name}}_tests_pkg 

comp_uvmf_core : comp_uvm_pkg comp_fli_pkg comp_uvmf_base_pkg {% if useDpiLink %} comp_dpi_link_pkg {% endif %}


make_build: comp_{{name}}_dut comp_uvmf_core comp_hvl comp_test_bench {% if useDpiLink %} dpi_link.o sv_lib.so {% endif %} {% if vmaps|length > 0 %} create_{{name}}_vmaps {% endif %}


hvl_build: {% for bfm in bfm_pkgs %} q_comp_{{bfm}}_pkg {% endfor %} comp_{{env_name}}_env_pkg comp_{{name}}_sequence_pkg comp_{{name}}_tests_pkg hvl_comp_testbench optimize


vinfo_build:{% if qvip_bfm_pkgs|length > 0 %} comp_qvip {% endif %} comp_{{name}}_vhdl_dut {% for vinfoDependency in vinfoDependencies %} {{vinfoDependency}} {% endfor %} build_hdl_vinfo build_hvl_vinfo $(VINFO_TGT)

	$(HDL_COMP_CMD) -F hdl.vf
	$(VEL_COMP)

build: $(BUILD_TGT)

{% if inFactReady %}
clean::
	@-rm -rvf infact_proj_dir *.d
	@-rm -rvf inFact.err auxstat.txt
{% endif %}

{% endblock %}


