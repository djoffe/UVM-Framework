{% set fname = "verification_ip/interface_packages/{{name}}_pkg/src/{{name}}_transaction.svh" %}
{% extends "base_template.TMPL" %}

{% block description %}
//
//----------------------------------------------------------------------
// Project         : {{name}} interface agent
// Unit            : Interface Transaction
// File            : {{name}}_transaction.svh
//----------------------------------------------------------------------
//     
// DESCRIPTION: This class defines the variables required for an {{name}}
//    transaction.  Class variables to be displayed in waveform transaction
//    viewing are added to the transaction viewing stream in the add_to_wave
//    function.
//
// ****************************************************************************
// ****************************************************************************
{% endblock %}

{% block contents %}
class {{name}}_transaction {%if paramDefs|length > 0%}      #(
{% for param in paramDefs %}      {{param.type}} {{param.name}}{% if param.value != None %} = {{param.value}}{% endif %}{% if not loop.last %},{% endif %}                                
{% endfor %}      ) {% endif %}
extends uvmf_transaction_base;

{%if paramDefs|length > 0%}
  `uvm_object_param_utils( {{name}}_transaction #(
  {% for param in paramDefs %}                         {{param.name}}{% if not loop.last %},{% endif %}

  {% endfor %}                          ))
{% else %}
  `uvm_object_utils( {{name}}_transaction )
{% endif %}

{% for txn in transVars %}
  {% if txn.isrand %}rand {% endif %}{{txn.type}} {{txn.name}} {{txn.unpackedDim}};
{% endfor %}

  //Constraints for the transaction variables:
{% for cnstr in transVarsConstraints %}
  constraint {{cnstr.name}} {{cnstr.type}}
{% endfor %}

  // System Verilog variables for C functions 
{% for txn in DPITransDecl %}
  {{txn.type}} {{txn.name}} {{txn.unpackedDim}};
{% endfor %}

  // ****************************************************************************
  // FUNCTION : new()
  // This function is the standard SystemVerilog constructor.
  //
  function new( string name = "" );
    super.new( name );
{% for DPIImport in DPIImports %}
    // Calling C functions
    {{DPIImport.name}}({% for argument in DPIImport.arguments %}{{argument['name']}}{% if not loop.last %},{% endif %}{% endfor %});
{% endfor %} 
  endfunction

  // ****************************************************************************
  // FUNCTION: convert2string()
  // This function converts all variables in this class to a single string for 
  // logfile reporting.
  //
  virtual function string convert2string();
    // UVMF_CHANGE_ME : Customize format if desired.
    return $sformatf("{% for txn in transVars %}{{txn.name}}:{%if txn.unpackedDim != "" %}%p {% else %}0x%x {% endif %}{% endfor %}"{% for txn in transVars %},{{txn.name}}{% endfor %});
  endfunction

  //*******************************************************************
  // FUNCTION: do_print()
  // This function is automatically called when the .print() function
  // is called on this class.
  //
  virtual function void do_print(uvm_printer printer);
    // UVMF_CHANGE_ME : Current contents of do_print allows for the use of UVM 1.1d, 1.2 or P1800.2.
    // Update based on your own printing preference according to your preferred UVM version
    $display(convert2string());
  endfunction

  //*******************************************************************
  // FUNCTION: do_compare()
  // This function is automatically called when the .compare() function
  // is called on this class.
  //
  virtual function bit do_compare (uvm_object rhs, uvm_comparer comparer);
    {{name}}_transaction {%if paramDefs|length > 0%}  #(
{% for param in paramDefs %}            .{{param.name}}({{param.name}}){% if not loop.last %},{% endif %}

{% endfor %}
             ){% endif %} RHS;
    if (!$cast(RHS,rhs)) return 0;
    // UVMF_CHANGE_ME : Eliminate comparison of variables not to be used for compare
    return (super.do_compare(rhs,comparer)
{% for txn in transVars %}{% if txn.iscompare %}
            &&(this.{{txn.name}} == RHS.{{txn.name}})
{% endif %}{% endfor %}            );
  endfunction

  //*******************************************************************
  // FUNCTION: do_copy()
  // This function is automatically called when the .copy() function
  // is called on this class.
  //
  virtual function void do_copy (uvm_object rhs);
    {{name}}_transaction {%if paramDefs|length > 0%}  #(
{% for param in paramDefs %}            .{{param.name}}({{param.name}}){% if not loop.last %},{% endif %}

{% endfor %}
             ){% endif %} RHS;

    assert($cast(RHS,rhs));
    super.do_copy(rhs);
{% for txn in transVars %}
    this.{{txn.name}} = RHS.{{txn.name}};
{% endfor %}
  endfunction

  // ****************************************************************************
  // FUNCTION: add_to_wave()
  // This function is used to display variables in this class in the waveform 
  // viewer.  The start_time and end_time variables must be set before this 
  // function is called.  If the start_time and end_time variables are not set
  // the transaction will be hidden at 0ns on the waveform display.
  // 
  virtual function void add_to_wave(int transaction_viewing_stream_h);
    if (transaction_view_h == 0) begin
      transaction_view_h = $begin_transaction(transaction_viewing_stream_h,"{{name}}_transaction",start_time);
    end
    // UVMF_CHANGE_ME : Color can be applied to transaction entries based on content, example below
    // case()
    //   1 : $add_color(transaction_view_h,"red");
    //   default : $add_color(transaction_view_h,"grey");
    // endcase
    super.add_to_wave(transaction_view_h);
    // UVMF_CHANGE_ME : Eliminate transaction variables not wanted in transaction viewing in the waveform viewer
{% for txn in transVars %}    $add_attribute(transaction_view_h,{{txn.name}},"{{txn.name}}");
{% endfor %}
    $end_transaction(transaction_view_h,end_time);
    $free_transaction(transaction_view_h);
  endfunction

endclass
{% endblock %}
