{% set fname = "verification_ip/interface_packages/{{name}}_pkg/src/{{name}}_configuration.svh" %}
{% extends "base_template.TMPL" %}

{% block description %}
//
//----------------------------------------------------------------------
// Project         : {{name}} interface agent
// Unit            : Interface configuration
// File            : {{name}}_configuration.svh
//----------------------------------------------------------------------
//                                          
// DESCRIPTION: This class contains all variables and functions used
//      to configure the {{name}} agent and its bfm's.  It gets the
//      bfm's from the uvm_config_db for use by the agent.
//
//      Configuration utility function:
//             initialize:
//                   This function causes the configuration to retrieve
//                   its virtual interface handle from the uvm_config_db.
//                   This function also makes itself available to its
//                   agent through the uvm_config_db.
//
//                Arguments:
//                   uvmf_active_passive_t activity:
//                        This argument identifies the simulation level
//                        as either BLOCK, CHIP, SIMULATION, etc.
//
//                   agent_path:
//                        This argument identifies the path to this
//                        configurations agent.  This configuration
//                        makes itself available to the agent specified
//                        by agent_path by placing itself into the
//                        uvm_config_db.
//
//                   interface_name:
//                        This argument identifies the string name of
//                        this configuration's driver and monitor BFMs.
//                        This string name is used to retrieve these 
//                        BFMs from the uvm_config_db.
//
//----------------------------------------------------------------------
//
// ****************************************************************************
{% endblock %}

{% block contents %}
class {{name}}_configuration {%if paramDefs|length > 0%} #(
{% for param in paramDefs %}      {{param.type}} {{param.name}}{% if param.value != None %} = {{param.value}}{% endif %}{% if not loop.last %},{% endif %}                                
{% endfor %}      ) {% endif %}
extends uvmf_parameterized_agent_configuration_base #(
      .DRIVER_BFM_BIND_T({% if useDpiLink %}{{name}}_driver_proxy {% else %}virtual {{name}}_driver_bfm {% endif %}{%if paramDefs|length > 0%} #(
{% for param in paramDefs %}                          .{{param.name}}({{param.name}}){% if not loop.last %},{% endif %}                                
{% endfor %}                           ) {% endif %}),
      .MONITOR_BFM_BIND_T({% if useDpiLink %} {{name}}_monitor_proxy {% else %} virtual {{name}}_monitor_bfm {% endif %}{%if paramDefs|length > 0%} #(
{% for param in paramDefs %}                          .{{param.name}}({{param.name}}){% if not loop.last %},{% endif %}                                
{% endfor %}                           ) {% endif %}));

{%if paramDefs|length > 0%}
  `uvm_object_param_utils( {{name}}_configuration #(
  {% for param in paramDefs %}                            {{param.name}}{% if not loop.last %},{% endif %}

  {% endfor %}                          ))
{% else %}
  `uvm_object_utils( {{name}}_configuration )
{% endif %}

{% for config in configVars %}
  {% if config.isrand %}rand {% endif %}{{config.type}} {{config.name}}{% if config.value != '' %} = {{config.value}}{% endif %};
{% endfor %}

  // Sequencer handle populated by agent
  uvm_sequencer #({{name}}_transaction {%if paramDefs|length > 0%} #(
{% for param in paramDefs %}       .{{param.name}}({{param.name}}){% if not loop.last %},{% endif %}                                
{% endfor %}      ) {% endif %}) sequencer;

  //Constraints for the configuration variables:
{% for cnstr in configVarsConstraints %}
  constraint {{cnstr.name}} {{cnstr.type}}
{% endfor %}

  covergroup {{name}}_configuration_cg;
    option.auto_bin_max=1024;
{% for config in configVars %}
    coverpoint {{config.name}};
{% endfor %}
  endgroup

  // ****************************************************************************
  // FUNCTION : new()
  // This function is the standard SystemVerilog constructor.
  //
  function new( string name = "" );
    super.new( name );
    // Construct the covergroup for this configuration class 
    {{name}}_configuration_cg = new;
  endfunction

  // ****************************************************************************
  // FUNCTION: post_randomize()
  // This function is automatically called after the randomize() function 
  // is executed.
  //
  function void post_randomize();
    super.post_randomize();
    {{name}}_configuration_cg.sample();
  endfunction

  // ****************************************************************************
  // FUNCTION: initialize
  //                   This function causes the configuration to retrieve
  //                   its virtual interface handle from the uvm_config_db.
  //                   This function also makes itself available to its
  //                   agent through the uvm_config_db.
  //
  //                ARGUMENTS:
  //                   uvmf_active_passive_t activity:
  //                        This argument identifies the simulation level
  //                        as either BLOCK, CHIP, SIMULATION, etc.
  //
  //                   AGENT_PATH:
  //                        This argument identifies the path to this
  //                        configurations agent.  This configuration
  //                        makes itself available to the agent specified
  //                        by agent_path by placing itself into the
  //                        uvm_config_db.
  //
  //                   INTERFACE_NAME:
  //                        This argument identifies the string name of
  //                        this configurations BFM's.  This string
  //                        name is used to retrieve the driver and 
  //                        monitor BFM from the uvm_config_db.
  //
  virtual function void initialize(uvmf_active_passive_t activity,
                                            string agent_path,
                                            string interface_name);

{% if useDpiLink %}
    active_passive      = activity;
    this.interface_name = interface_name;
    void'(uvm_config_db #(uvm_bitstream_t)::get(null,interface_name,"enable_transaction_viewing",enable_transaction_viewing));

    driver_bfm   = {{name}}_driver_proxy{%if paramDefs|length > 0%} #({% for param in paramDefs %}.{{param.name}}({{param.name}}){% if not loop.last %},{% endif %}{% endfor %} ){% endif %}::get({interface_name,"_drv_bfm"});
    monitor_bfm  = {{name}}_monitor_proxy{%if paramDefs|length > 0%} #({% for param in paramDefs %}.{{param.name}}({{param.name}}){% if not loop.last %},{% endif %}{% endfor %} ){% endif %}::get({interface_name,"_mon_bfm"});
{% else %}
    super.initialize( activity, agent_path, interface_name);
{% endif %}
{% if enableFunctionalCoverage %}    has_coverage = 1;
{% endif %}
    // The covergroup is given the same name as the interface
    {{name}}_configuration_cg.set_inst_name(interface_name);

    // This configuration places itself into the uvm_config_db for the agent, identified by the agent_path variable, to retrieve.  
    uvm_config_db #( {{name}}_configuration {%if paramDefs|length > 0%} #(
{% for param in paramDefs %}                             .{{param.name}}({{param.name}}){% if not loop.last %},{% endif %}                                
{% endfor %}                             )
{% endif %}                    )::set( null ,agent_path,UVMF_AGENT_CONFIG, this );

    // This configuration also places itself in the config db using the same identifier used by the interface.  This allows users to access
    // configuration variables and the interface through the bfm api class rather than directly accessing the BFM.  This is useful for 
    // accessingthe BFM when using Veloce
    uvm_config_db #( {{name}}_configuration {%if paramDefs|length > 0%} #(
{% for param in paramDefs %}                             .{{param.name}}({{param.name}}){% if not loop.last %},{% endif %}                                
{% endfor %}                             )
{% endif %}                    )::set( null ,UVMF_CONFIGURATIONS, interface_name, this );

    {{name}}_configuration_cg.set_inst_name($sformatf("{{name}}_configuration_cg_%s",get_full_name()));

    // This controls whether or not the agent returns a transaction handle in the driver when calling 
    // item_done() back into the sequencer or not. If set to 1, a transaction is sent back which means
    // the sequence on the other end must use the get_response() part of the driver/sequence API. If 
    // this doesn't occur, there will eventually be response_queue overflow errors during the test.
    return_transaction_response = 1'b0;

  endfunction

  // ****************************************************************************
  // TASK: wait_for_reset
  // *[Required]*  Blocks until reset is released.  The wait_for_reset operation is performed
  // by a task in the monitor bfm.
  virtual task wait_for_reset();
    monitor_bfm.wait_for_reset();
  endtask

  // ****************************************************************************
  // TASK: wait_for_num_clocks
  // *[Required]* Blocks until specified number of clocks have elapsed. The wait_for_num_clocks
  // operation is performed by a task in the monitor bfm.
  virtual task wait_for_num_clocks(int clocks);
   
    monitor_bfm.wait_for_num_clocks(clocks);
  endtask

  // ****************************************************************************
  // FUNCTION : convert2string()
  // This function is used to convert variables in this class into a string for log messaging.
  // 
  virtual function string convert2string ();
    return $sformatf("{% for config in configVars %}{{config.name}}:0x%x {% endfor %}"{% for config in configVars %},{{config.name}}{% endfor %});
  endfunction

// ****************************************************************************
  // FUNCTION: get_sequencer
  function uvm_sequencer #({{name}}_transaction {%if paramDefs|length > 0%} #(
{% for param in paramDefs %}       .{{param.name}}({{param.name}}){% if not loop.last %},{% endif %}                                
{% endfor %}      ) {% endif %}) get_sequencer();
    return sequencer;
  endfunction
  
endclass
{% endblock %}
