{% set fname = "verification_ip/interface_packages/{{name}}_pkg/src/{{name}}_monitor_bfm.sv" %}
{% extends "base_template.TMPL" %}

{% block description %}
//
//----------------------------------------------------------------------
// Project         : {{name}} interface agent
// Unit            : Interface Monitor BFM
// File            : {{name}}_monitor_bfm.sv
//----------------------------------------------------------------------
//     
// DESCRIPTION: This interface performs the {{name}} signal monitoring.
//      It is accessed by the uvm {{name}} monitor through a virtual
//      interface handle in the {{name}} configuration.  It monitors the
//      signals passed in through the port connection named bus of
//      type {{name}}_if.
//
//     Input signals from the {{name}}_if are assigned to an internal input
//     signal with a _i suffix.  The _i signal should be used for sampling.
//
//     The input signal connections are as follows:
//       bus.signal -> signal_i 
//
//      Interface functions and tasks used by UVM components:
//             monitor(inout TRANS_T txn);
//                   This task receives the transaction, txn, from the
//                   UVM monitor and then populates variables in txn
//                   from values observed on bus activity.  This task
//                   blocks until an operation on the {{name}} bus is complete.
//
// ****************************************************************************
// ****************************************************************************
{% endblock %}

{% block contents %}
import uvmf_base_pkg_hdl::*;
import {{name}}_pkg_hdl::*;
{% if not veloceReady %}
import {{name}}_pkg::*;
{% endif %}

{% if useDpiLink %}module{% else %}interface{% endif %} {{name}}_monitor_bfm {%if paramDefs|length > 0%}      #(
{% for param in paramDefs %}      {{param.type}} {{param.name}} = {{param.value}}{% if not loop.last %},{% endif %}                                
{% endfor %}      )
{% endif %}
( {{name}}_if  bus );
{% if veloceReady %}
// pragma attribute {{name}}_monitor_bfm partition_interface_xif                                  
// The above pragma and additional ones in-lined below are for running this BFM on Veloce
{% endif %}
{% if useDpiLink %}
  import "DPI-C" context function void C_{{name}}_notify_transaction( input c_bit_array_t bit_vec_in);
  export "DPI-C" function configure;
  export "DPI-C" function start_monitoring;
  export "DPI-C" task     wait_for_reset;
  export "DPI-C" task     wait_for_num_clocks;
{% endif %}

   tri        {{clock}}_i;
   tri        {{reset}}_i;
{% for sig in sigs %}
   tri        {{sig.vector}} {{sig.name}}_i;
{% endfor %}

   assign     {{clock}}_i    =   bus.{{clock}};
   assign     {{reset}}_i    =   bus.{{reset}};
{% for sig in sigs %}
   assign     {{sig.name}}_i = bus.{{sig.name}};
{% endfor %}

   // Proxy handle to UVM monitor
   {{name}}_pkg::{{name}}_monitor {%if paramDefs|length > 0%} #(
{% for param in paramDefs %}              .{{param.name}}({{param.name}}){% if not loop.last %},{% endif %}                                
{% endfor %}                    ) {% endif %} proxy;
{% if veloceReady %}
  // pragma tbx oneway proxy.notify_transaction                 
{% endif %}

//******************************************************************                         
{% if veloceReady %}
   task wait_for_reset(); {% if useDpiLink %}{% else %}// pragma tbx xtf  {% endif %}                                                
{% else %}
   task wait_for_reset();
{% endif %}
      @(posedge {{clock}}_i) ;                                                                    
      do_wait_for_reset();                                                                   
   endtask                                                                                   

// ****************************************************************************              
   task do_wait_for_reset();                                                                 
      wait ( {{reset}}_i == {% if resetAssertionLevel %}0{% else %}1{% endif %} ) ;                                                              
      @(posedge {{clock}}_i) ;                                                                    
   endtask    
   
   
//******************************************************************                         
{%if useDpiLink %}
   task wait_for_num_clocks( c_bit_array_t bit_vec);   
     int unsigned count;  
{% else %} 
   task wait_for_num_clocks( input int unsigned count); {% if veloceReady %}// pragma tbx xtf {% endif %}
{% endif %}

      @(posedge {{clock}}_i);  
      {% if useDpiLink %}{count}=bit_vec;  {% endif %}                                                               
      repeat (count-1) @(posedge {{clock}}_i);                                                    
   endtask      

//******************************************************************                         
  event go;                                                                                 
{% if veloceReady %}
  function void start_monitoring(); {% if useDpiLink %}{% else %}// pragma tbx xtf  {% endif %}      
{% else %}
  function void start_monitoring();
{% endif %}
     -> go;                                                                                 
  endfunction                                                                               
  
  // ****************************************************************************              
  initial begin                                                                             
     @go;                                                                                   
     forever begin                                                                          
{% for txn in transVars %}
        {{txn.type}} {{txn.name}} {{txn.unpackedDim}};
{% endfor %}
        @(posedge {{clock}}_i);                                                                   

        do_monitor(
{% for txn in transVars %}
                   {{txn.name}}{% if not loop.last %},
{% endif %}
{% endfor %}
                  );
{% if useDpiLink %}
        C_{{name}}_notify_transaction({
{% else %} 
        proxy.notify_transaction(
{% endif %}
{% for txn in transVars %}
                   {{txn.name}}{% if not loop.last %},
{% endif %}
{% endfor %}
{% if useDpiLink %}
        } {% endif %}
                                );     
     end                                                                                    
  end                                                                                       

//******************************************************************
   function void configure({%if useDpiLink %}  c_bit_array_t bit_vec);
           uvmf_active_passive_t act_pass;
           uvmf_initiator_responder_t   init_resp;
{% for config in configVars %}
            {{config.type}} {{config.name}};
{% endfor %}
          {act_pass,init_resp{% for config in configVars %},{{config.name}}{% endfor %}} = bit_vec;
{% else %}
{% if veloceReady %}
          uvmf_active_passive_t active_passive,
          uvmf_initiator_responder_t   initiator_responder
{% for config in configVars %}
          ,{{config.type}} {{config.name}}
{% endfor %}
); // pragma tbx xtf
{% else %}
          {{name}}_configuration cfg
); 
{% endif %}
{% endif %}
   endfunction


// ****************************************************************************              
     task do_monitor(
{% for txn in transVars %}
                   output {{txn.type}} {{txn.name}} {{txn.unpackedDim}}{% if not loop.last %},
{% endif %}
{% endfor %}
                    );
// UVMF_CHANGE_ME : Implement protocol monitoring.
// Reference code;
//    while (control_signal == 1'b1) @(posedge {{clock}}_i);
{% for sig in sigs %}
//    xyz = {{sig.name}}_i;  //    {{sig.vector}} 
{% endfor %}

      @(posedge {{clock}}_i);
      @(posedge {{clock}}_i);
      @(posedge {{clock}}_i);
      @(posedge {{clock}}_i);

     endtask         
  
{% if useDpiLink %}
endmodule
{% else %} 
endinterface
{% endif %}
{% endblock %}
