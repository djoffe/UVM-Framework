{% set fname = "verification_ip/interface_packages/{{name}}_pkg/{{name}}_pkg.sv" %}
{% extends "base_template.TMPL" %}

{% block description %}
//
//----------------------------------------------------------------------
// Project         : {{name}} interface agent
// Unit            : Interface HVL package
// File            : {{name}}_pkg.sv
//----------------------------------------------------------------------
//     
// PACKAGE: This file defines all of the files contained in the
//    interface package that will run on the host simulator.
//
// CONTAINS:
//    - <{{name}}_typedefs_hdl>
//    - <{{name}}_typedefs.svh>
//    - <{{name}}_transaction.svh>

//    - <{{name}}_configuration.svh>
//    - <{{name}}_driver.svh>
//    - <{{name}}_monitor.svh>

//    - <{{name}}_transaction_coverage.svh>
//    - <{{name}}_sequence_base.svh>
//    - <{{name}}_random_sequence.svh>

//    - <{{name}}_responder_sequence.svh>
//    - <{{name}}2reg_adapter.svh>
//
// ****************************************************************************
// ****************************************************************************
{% endblock %}

{% block contents %}
package {{name}}_pkg;
  
   import uvm_pkg::*;
   import uvmf_base_pkg_hdl::*;
   import uvmf_base_pkg::*;
   import {{name}}_pkg_hdl::*;
{% if useDpiLink %}
   import dpi_link_pkg::*;
   `include "mcd_macros.svh"
   `include "dpi_link_imports.svh"
   `include "dpi_link_macros.svh"
   `include "dpi_link_uvmf_imports.svh"
{% endif %}

   `include "uvm_macros.svh"
   
   export {{name}}_pkg_hdl::*;
   
{% for ext_import in external_imports %}
   import {{ext_import}}::*;
{% endfor %}
{% for DPIImport in DPIImports %}
   import "DPI-C" context function {{DPIImport.svType}} {{DPIImport.name}} ({% for argument in DPIImport.arguments %}{{argument['dir']}} {{argument['type']}} {{argument['name']}} {{argument['unpacked_dimension']}} {% if not loop.last %},{% endif %}{% endfor %});
{% endfor %} 

   // Parameters defined as HVL parameters
{% for param in hvlPkgParamDefs %}
   parameter {{param.type}} {{param.name}}{% if param.value != None %} = {{param.value}}{% endif %};
{% endfor %}

   `include "src/{{name}}_typedefs.svh"
   `include "src/{{name}}_transaction.svh"

{% if useDpiLink %} 
   `include "src/{{name}}_driver_proxy.svh"
   `include "src/{{name}}_monitor_proxy.svh"
{% endif %}
   `include "src/{{name}}_configuration.svh"
   `include "src/{{name}}_driver.svh"
   `include "src/{{name}}_monitor.svh"

   `include "src/{{name}}_transaction_coverage.svh"
   `include "src/{{name}}_sequence_base.svh"
   `include "src/{{name}}_random_sequence.svh"

   `include "src/{{name}}_responder_sequence.svh"
   `include "src/{{name}}2reg_adapter.svh"

   `include "src/{{name}}_agent.svh"
{% if useDpiLink %} 
   export "DPI-C" function {{name}}_pkg_notify_transaction;
   function void {{name}}_pkg_notify_transaction(string xrtl_path, c_bit_array_t bit_vec_in);
      {{name}}_monitor_proxy proxy_h;
      // get uses the xrtl_path of the monitor_bfm, to get the monitor proxy handle 
      // which has access to the {{name}}_monitor and calls its notify_transaction()
      proxy_h = {{name}}_monitor_proxy#()::get(xrtl_path);
      proxy_h.notify_transaction_bit_vec(bit_vec_in);
   endfunction  
{% endif %}

// UVMF_CHANGE_ME : When adding new interface sequences to the src directory
//    be sure to add the sequence file here so that it will be
//    compiled as part of the interface package.  Be sure to place
//    the new sequence after any base sequences of the new sequence.

endpackage

{% endblock %}
